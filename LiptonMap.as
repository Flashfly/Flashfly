package{	import com.google.maps.LatLng;	import com.google.maps.LatLngBounds;	import com.google.maps.Map;	import com.google.maps.MapEvent;	import com.google.maps.MapMouseEvent;	import com.google.maps.MapType;	import com.google.maps.MapZoomEvent;	import com.google.maps.controls.MapTypeControl;	import com.google.maps.controls.ControlPosition;	import com.google.maps.controls.PositionControl;	import com.google.maps.controls.PositionControlOptions;	import com.google.maps.controls.ScaleControl;	import com.google.maps.controls.ZoomControl;	import com.google.maps.controls.ZoomControlOptions;	import com.google.maps.overlays.Marker;	import com.google.maps.overlays.MarkerOptions;		import fl.transitions.Zoom;		import flash.display.Sprite;	import flash.display.Stage;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.Point;	import flash.net.URLLoader;	import flash.net.URLRequest;			import nl.Vynd.Clusterer;	import nl.Vynd.VyndCore;	import nl.Vynd.Clusterer;	import nl.Vynd.VyndMarkerCluster;	import nl.Vynd.VyndMarker;	import nl.Vynd.VyndBericht;
		public class LiptonMap extends Sprite	{		public var map:Map;		private var zoomlevel:Number = 2;		private var centerpoint:LatLng = new LatLng(52.09807,5.117569);		private var types:Array = [0, 2, 3];		private var clusterer:Clusterer;		private var currentLatLng:LatLng;		private var xmlLocs:XML;		private var totalAmountofLocs:int;		private var strXMLPath:String = "testLoc.xml";		private var xmlLoader:URLLoader;		private var markers:Array;		private var attachedMarkers:Array;		private var LocationsArray:Array;						public function LiptonMap()		{			this.addEventListener( Event.ADDED_TO_STAGE , onAddedToStage );		}				private function onAddedToStage( event:Event ):void		{			map = new Map()			map.key = "ABQIAAAACiVah5OZWtCoUGrpznXHRRS_o9Jaltt5jzQ9i7nnMWj9Js-UmRRDCEDU9RZkaieGS3csjNYyZgjuJw";			map.sensor = "true";			map.setSize(new Point(stage.stageWidth, stage.stageHeight));			map.addEventListener(MapEvent.MAP_READY, onMapReady);			this.addChildAt(map,0);				initStage();		}				private function initStage():void		{			stage.frameRate = 30;			stage.showDefaultContextMenu = true;			stage.scaleMode = StageScaleMode.NO_SCALE;			stage.align = StageAlign.TOP_LEFT;			stage.addEventListener(Event.RESIZE, onStageResize);			onStageResize();			}				public function onMapReady(e:Event):void 		{			map.setCenter(centerpoint, zoomlevel, MapType.NORMAL_MAP_TYPE);			map.addControl(				new ZoomControl(					new ZoomControlOptions(						{ 					  position: new ControlPosition(ControlPosition.ANCHOR_TOP_LEFT,31, 200)						}					)));			map.addControl(new PositionControl(new PositionControlOptions(				{ 					  position: new ControlPosition(ControlPosition.ANCHOR_TOP_LEFT,10, 130)				}			)));			map.addControl(new MapTypeControl(MapType.DEFAULT_MAP_TYPES[types]));			map.addControl(new ScaleControl());			map.enableScrollWheelZoom();			map.addEventListener(MapZoomEvent.ZOOM_CHANGED, onMapZoomChanged);			placeMarkers();		}				public function placeMarkers():void {			xmlLoader = new URLLoader();			xmlLoader.addEventListener(Event.COMPLETE, onXMLLoadComplete);			xmlLoader.load(new URLRequest(strXMLPath));		}				public function onXMLLoadComplete(e:Event):void		{				markers= [];			xmlLocs = new XML(e.target.data);			totalAmountofLocs = xmlLocs.location.length();			trace("XML Loaded");			for (var i:Number = 0; i<totalAmountofLocs; i++){				var id:String = xmlLocs.location[i].@id;				var latNumber:Number= new Number(xmlLocs.location[i].@lat);				var lngNumber:Number= new Number(xmlLocs.location[i].@lng);				trace("LAT: " + latNumber + " LNG: "+ lngNumber);				var vyndje:MovieClip = new mcIcon();				vyndje.name = id;				vyndje.addEventListener(MouseEvent.CLICK, vyndjeClicked);				markers.push(new VyndMarker(new LatLng(latNumber, lngNumber), vyndje));				trace("markers:"+ markers[i]);			}			clusterer = new Clusterer(markers, map.getZoom(), 30);			attachedMarkers = [];			attachMarkers();								}				private function attachMarkers():void		{			for each (var marker:Marker in attachedMarkers) {				map.removeOverlay(marker);			}			attachedMarkers = [];			var clusteredMarkers:Array = clusterer.clusters;						for each (var cluster:Array in clusteredMarkers) {				if (cluster.length == 1) {					// there is only a single marker in this cluster					marker = cluster[0];				} else {					var mcCluster:MovieClip = new mcIconCluster();					marker = new VyndMarkerCluster(cluster, mcCluster);				}				map.addOverlay(marker);				attachedMarkers.push(marker);			}		}		public function xmlVyndjeLoaded(e:Event):void {			/*			var bericht:VyndBericht = new VyndBericht(new XML(e.target.data));			addChild(bericht);			bericht.x = 45;			bericht.y = 40;			*/		}				public function vyndjeClicked(me:MouseEvent):void {			var locXML:URLLoader = new URLLoader();			locXML.addEventListener(Event.COMPLETE, xmlVyndjeLoaded);			var xmlUrlLoc:String = me.target.name+ ".xml";			trace(xmlUrlLoc);			locXML.load(new URLRequest(xmlUrlLoc));		}				//if zoom changes, change clustering		private function onMapZoomChanged(event:MapZoomEvent):void		{			clusterer.zoom = map.getZoom();			attachMarkers();		}						private function onStageResize(... eventArray:Array):void		{			trace("BEFORE ACTUALLY RESIZING");			map.x = 0;			map.y = 0;			header.bg.width = stage.stageWidth;			//header.height = stage.stageHeight;			map.setSize(new Point((stage.stageWidth ), (stage.stageHeight)));		}	}}